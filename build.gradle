import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.6.0.0"
}

printf "Date: %s\nHost: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME),
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion, GroovySystem.getVersion(), JavaVersion.current()

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "io.codearte.nexus-staging"
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'


configurations {
    alpnagent
    asciidoclet
    wagon
}

dependencies {
    compile "org.xbib:net-url:${project.property('xbib-net-url.version')}"
    compile "io.netty:netty-codec-http2:${project.property('netty.version')}"
    compile "io.netty:netty-handler-proxy:${project.property('netty.version')}"
    testCompile "io.netty:netty-tcnative-boringssl-static:${project.property('tcnative.version')}"
    testCompile "org.conscrypt:conscrypt-openjdk-uber:${project.property('conscrypt.version')}"
    testCompile "junit:junit:${project.property('junit.version')}"
    testCompile "com.fasterxml.jackson.core:jackson-databind:${project.property('jackson.version')}"
    alpnagent "org.mortbay.jetty.alpn:jetty-alpn-agent:${project.property('alpnagent.version')}"
    asciidoclet "org.xbib:asciidoclet:${project.property('asciidoclet.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all,-serial"
}

jar {
    manifest {
        attributes('Implementation-Version': project.version)
    }
}

test {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
        jvmArgs "-javaagent:" + configurations.alpnagent.asPath
    }
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

asciidoctor {
    attributes toc: 'left',
            doctype: 'book',
            icons: 'font',
            encoding: 'utf-8',
            sectlink: true,
            sectanchors: true,
            linkattrs: true,
            imagesdir: 'img',
            'source-highlighter': 'coderay'
}

javadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = "org.xbib.asciidoclet.Asciidoclet"
    options.overview = "src/docs/asciidoclet/overview.adoc"
    options.addStringOption "-base-dir", "${projectDir}"
    options.addStringOption "-attribute",
            "name=${project.name},version=${project.version},title-link=https://github.com/jprante/${project.name}"
    configure(options) {
        noTimestamp = true
    }
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    into "build/tmp"
    classifier 'javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    into "build/tmp"
    classifier 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'
