import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "com.github.spotbugs" version "1.6.9"
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.5.6.0.1"
}

printf "Date: %s\nHost: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME),
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion, GroovySystem.getVersion(), JavaVersion.current()

apply plugin: 'org.xbib.gradle.plugin.asciidoctor'
apply plugin: "io.codearte.nexus-staging"

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: "com.github.spotbugs"

    configurations {
        alpnagent
        asciidoclet
        wagon
    }

    dependencies {
        alpnagent "org.mortbay.jetty.alpn:jetty-alpn-agent:${project.property('alpnagent.version')}"
        asciidoclet "org.asciidoctor:asciidoclet:${project.property('asciidoclet.version')}"
        wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all,-serial"
    }

    jar {
        manifest {
            attributes('Implementation-Version': project.version)
        }
    }

    test {
        systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'
        testLogging {
            showStandardStreams = false
            exceptionFormat = 'full'
        }
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            jvmArgs "-javaagent:" + configurations.alpnagent.asPath
        }
    }

    clean {
        delete 'out'
    }

    asciidoctor {
        attributes toc: 'left',
                doctype: 'book',
                icons: 'font',
                encoding: 'utf-8',
                sectlink: true,
                sectanchors: true,
                linkattrs: true,
                imagesdir: 'img',
                'source-highlighter': 'coderay'
    }

    /*javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.doclet = "org.xbib.asciidoclet.Asciidoclet"
        options.overview = "src/docs/asciidoclet/overview.adoc"
        options.addStringOption "-base-dir", "${projectDir}"
        options.addStringOption "-attribute",
                "name=${project.name},version=${project.version},title-link=https://github.com/jprante/${project.name}"
        configure(options) {
            noTimestamp = true
        }
    }*/

    task javadocJar(type: Jar, dependsOn: classes) {
        from javadoc
        into "build/tmp"
        classifier 'javadoc'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        into "build/tmp"
        classifier 'sources'
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    if (project.hasProperty('signing.keyId')) {
        signing {
            sign configurations.archives
        }
    }

    ext {
        user = 'jprante'
        name = 'netty-http'
        description = 'HTTP client and server for Netty'
        scmUrl = 'https://github.com/' + user + '/' + name
        scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
        scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    }

    task xbibUpload(type: Upload) {
        group = 'publish'
        configuration = configurations.archives
        uploadDescriptor = true
        repositories {
            if (project.hasProperty("xbibUsername")) {
                mavenDeployer {
                    configuration = configurations.wagon
                    repository(url: 'sftp://xbib.org/repository') {
                        authentication(userName: xbibUsername, privateKey: xbibPrivateKey)
                    }
                }
            }
        }
    }

    task sonaTypeUpload(type: Upload) {
        group = 'publish'
        configuration = configurations.archives
        uploadDescriptor = true
        repositories {
            if (project.hasProperty('ossrhUsername')) {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        groupId project.group
                        artifactId project.name
                        version project.version
                        name project.name
                        description description
                        packaging 'jar'
                        inceptionYear '2012'
                        url scmUrl
                        organization {
                            name 'xbib'
                            url 'http://xbib.org'
                        }
                        developers {
                            developer {
                                id user
                                name 'JÃ¶rg Prante'
                                email 'joergprante@gmail.com'
                                url 'https://github.com/jprante'
                            }
                        }
                        scm {
                            url scmUrl
                            connection scmConnection
                            developerConnection scmDeveloperConnection
                        }
                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                    }
                }
            }
        }
    }

    spotbugs {
        toolVersion = '3.1.3'
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        effort = "max"
        reportLevel = "high"
        // includeFilter = file("config/findbugs/findbugs-include.xml")
        // excludeFilter = file("config/findbugs/findbugs-excludes.xml")
    }
    spotbugsMain.reports {
        xml.enabled = false
        html.enabled = true
    }
    spotbugsTest.reports {
        xml.enabled = false
        html.enabled = true
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${project.group} ${project.name}"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.tests", "src/test/java"
        property "sonar.scm.provider", "git"
        property "sonar.junit.reportsPath", "build/test-results/test/"
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}
